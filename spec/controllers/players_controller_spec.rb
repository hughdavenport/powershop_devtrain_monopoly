require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe PlayersController, type: :controller do

  # This should return the minimal set of attributes required to create a valid
  # Player. As you add validations to Player, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
    { piece: :boot }
  }

  let(:invalid_attributes) {
    { piece: :invalid }
    skip("Can't test invalid enums, see bug https://github.com/rails/rails/issues/13971")
  }

  let(:valid_game_attributes) {
    { number_of_players: 2 }
  }

  let(:game) {
    Game.create(valid_game_attributes)
  }

  let(:username) { "testing" }

  before(:each) {
    User.create!(username: username)
  }

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # PlayersController. Be sure to keep this updated too.
  let(:valid_session) { {} }

  describe "GET #index" do
    it "assigns all players as @players" do
      player = game.players.create! valid_attributes
      get :index, {game_id: game, username: username}, valid_session
      expect(assigns(:players)).to eq([player])
    end
  end

  describe "GET #show" do
    it "assigns the requested player as @player" do
      player = game.players.create! valid_attributes
      get :show, {game_id: game, :id => player.to_param, username: username}, valid_session
      expect(assigns(:player)).to eq(player)
    end
  end

  describe "GET #new" do
    it "assigns a new player as @player" do
      get :new, {game_id: game, username: username}, valid_session
      expect(assigns(:player)).to be_a_new(Player)
    end
  end

  describe "GET #edit" do
    it "assigns the requested player as @player" do
      player = game.players.create! valid_attributes
      get :edit, {game_id: game, :id => player.to_param, username: username}, valid_session
      expect(assigns(:player)).to eq(player)
    end
  end

  describe "POST #create" do
    context "with valid params" do
      it "creates a new Player" do
        expect {
          post :create, {game_id: game, :player => valid_attributes, username: username}, valid_session
        }.to change(Player, :count).by(1)
      end

      it "redirects to the game" do
        post :create, {game_id: game, :player => valid_attributes, username: username}, valid_session
        expect(response).to redirect_to(game)
      end
    end

    context "with invalid params" do
      it "assigns a newly created but unsaved player as @player" do
        post :create, {game_id: game, :player => invalid_attributes, username: username}, valid_session
        expect(assigns(:player)).to be_a_new(Player)
      end

      it "re-renders the 'new' template" do
        post :create, {game_id: game, :player => invalid_attributes, username: username}, valid_session
        expect(response).to render_template("new")
      end
    end
  end

  describe "PUT #update" do
    context "with valid params" do
      let(:new_attributes) {
        { piece: :hat }
      }

      it "updates the requested player" do
        player = game.players.create! valid_attributes
        put :update, {game_id: game, :id => player.to_param, :player => new_attributes, username: username}, valid_session
        player.reload
        expect(player.piece.to_sym).to eq new_attributes[:piece]
      end

      it "assigns the requested player as @player" do
        player = game.players.create! valid_attributes
        put :update, {game_id: game, :id => player.to_param, :player => valid_attributes, username: username}, valid_session
        expect(assigns(:player)).to eq(player)
      end

      it "redirects to the game" do
        player = game.players.create! valid_attributes
        put :update, {game_id: game, :id => player.to_param, :player => valid_attributes, username: username}, valid_session
        expect(response).to redirect_to(game)
      end
    end

    context "with invalid params" do
      it "assigns the player as @player" do
        player = game.players.create! valid_attributes
        put :update, {game_id: game, :id => player.to_param, :player => invalid_attributes, username: username}, valid_session
        expect(assigns(:player)).to eq(player)
      end

      it "re-renders the 'edit' template" do
        player = game.players.create! valid_attributes
        put :update, {game_id: game, :id => player.to_param, :player => invalid_attributes, username: username}, valid_session
        expect(response).to render_template("edit")
      end
    end
  end

  describe "DELETE #destroy" do
    it "destroys the requested player" do
      player = game.players.create! valid_attributes
      expect {
        delete :destroy, {game_id: game, :id => player.to_param, username: username}, valid_session
      }.to change(Player, :count).by(-1)
    end

    it "redirects to the players list" do
      player = game.players.create! valid_attributes
      delete :destroy, {game_id: game, :id => player.to_param, username: username}, valid_session
      expect(response).to redirect_to(game_players_url(game))
    end
  end

end
